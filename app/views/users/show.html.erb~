<script>

var territoryColors = <%= render partial: "territory_colors", locals: {territoryColors: @territoryColors} %>;
var rendered_forts = [<%= render partial: "fort", collection: @forts %>];
var rendered_encampments = [<%= render partial: "encampment", collection: @encampments %>];

var fort_string = rendered_forts.toString();
fort_string = fort_string.replace(",","', '");
fort_string = fort_string.concat("'");
fort_string = "'".concat(fort_string);

var encampment_string = rendered_encampments.toString();
encampment_string = encampment_string.replace(",","', '");
encampment_string = encampment_string.concat("'");
encampment_string = "'".concat(encampment_string);

var clicked = ["f", 1];
var placing = "f";
var exception;
var level = "globe";
var english_level = "globe";
var clear_create_canvas
var itinerary = [];
var trading = "f";
var selected;
// Defining lists of territories and continents with their active color values and their starting points.

	var colors = [["#central_america", [0xe5,0x42,0x42], [488,780] ,[0.311006362]],
["#central_asia",[0xf1,0x71,0x71], [2054,526] ,[0.284473688]],
 ["#central_south_america",[0xfb,0x07,0x07], [822,1020],[0.402101331]], 
["#china",[0xfb,0x07,0xca], [2342,542] ,[0.073106002]], 
["#coastal_africa",[0xd0,0x2e,0xb0], [1436,959] ,[0.653478724]], 
["#coastal_south_america",[0xc4,0x56,0xae], [908,1340] ,[1.025283875]],
 ["#congo",[0x87,0x13,0x70], [1720,1015] ,[4.093718719]], 
["#eastern_africa",[0x96,0x0e,0xbd], [1844,887] ,[3.45647866]], 
["#eastern_canada",[0xc1,0x52,0xe1], [394,206] ,[0.338781336]], 
["#eastern_south_america",[0xc6,0x00,0xff], [904,1088] ,[1.078443444]], 
["#egypt",[0x5d,0x1e,0x6f], [1724,774] ,[0.143233025]], 
["#greenland",[0x48,0x0e,0xcb], [918,204] ,[1]],
 ["#iceland",[0x84,0x55,0xef], [1393,399] ,[0.566702988]],
 ["#india",[0x32,0x3a,0xde], [2278,786] ,[0.023725458]], 
["#indonesia",[0x5f,0x65,0xd0], [2558,1084] ,[0.177003406]], 
["#madagascar",[0x5f,0xa4,0xd0], [2052,1280] ,[2.751700999]],
 ["#middle_east",[0x0f,0x97,0xed], [1868,664] ,[0.218084511]], 
["#mongolia",[0x33,0x79,0xa6], [2480,568] ,[8.573449039]], 
["#new_zealand",[0x06,0xb5,0x6d], [3010,1163] ,[0.292389938]],
["#non_contiguous_united_states",[0x7e,0xc2,0xed], [0,340] ,[1.555525194]],
 ["#northeastern_united_states",[0x30,0xcf,0xd5], [704,596] ,[0.02432892]], 
["#northern_australia",[0x6b,0xf6,0xfb], [2872,1260] ,[1.060924816]], 
["#northern_europe",[0x22,0x7f,0x82], [1647,500] ,[0.03048697]],
 ["#northwestern_united_states",[0x67,0x91,0x93], [414,598] ,[0.145380297]], 
["#pacific_asia",[0x73,0xe1,0xb4], [2834,526] ,[0.014887273]], 
 ["#russia",[0x23,0xab,0x73], [1902,206] ,[0.484910872]],
 ["#sahara",[0x23,0xab,0x33], [1454,730] ,[1.277875253]], 
["#southeastern_asia",[0x7b,0xe1,0x87], [2406,800] ,[0.123679885]], 
["#southeastern_united_states",[0x00,0xff,0x1e], [718,734] ,[0.03018645]], 
["#southern_african_territory",[0x19,0x77,0x24], [1732,1242] ,[0.986084614]],
 ["#southern_australia",[0x50,0x7E,0x55], [2714,1296] ,[0.442689699]], 
["#southern_europe",[0x8f,0xc6,0x40], [1688,602] ,[0.035175045]], 
["#southwestern_united_states",[0x51,0x8a,0x00], [406,660] ,[0.059710917]],
 ["#ukraine",[0x97,0xde,0x32], [1660,340] ,[0.076732312]], 
["#united_kingdom", [0x19,0xaf,0xe0], [1522,490] ,[0.01625007]],
 ["#western_europe",[0x8a,0xa6,0x33], [1520,578] ,[0.018317252]],
 ["#western_canada", [0xff,0xea,0x3d], [250,349] ,[1.358437809]], 
["#western_south_america",[0xea,0xdb,0x35], [834,1143] ,[2.043553816]]];

	var color_key = [["#asia", [0x32,0x7c,0x00], [1844,226], [1662,1018]], ["#australia", [0x00,0x7c,0x78], [2546,1080], [868,640]], ["#africa", [0x2f,0x44,0x5a], [1444,724], [722,842]], ["#europe", [0x5a,0x4c,0x2f], [1390,332], [654,442]], ["#north_america", [0x43,0x5a,0x2f], [0,178], [1532,912]], ["#south_america", [0x53,0x2f,0x5a], [798,1008], [528,786]]];

// order asia australia africa e na sa 

var continents = [[1,3,13,16,17,23,25,27],
[14,20,24,30],
[4,6,7,10,15,26,29],
[12,21,31,33,34,35],
[0,8,11,18,19,22,28,32,36],
[2,5,9,37]];





var previous_level = [];

$( document ).ready(function() {

	function setOriginalZoom() {

		$(".territoryImage").attr("viewBox", "0 0 " + $(window).width()*0.95 + " " + $(window).height()*0.95);
		$(".territoryImage").attr("width", $(".territoryImage").attr("viewBox").split(" ")[2]);
		$(".territoryImage").attr("height", $(".territoryImage").attr("viewBox").split(" ")[3]);

		$("#background").css("width", $(".territoryImage").width())
		$("#renderedSprites").css("height", $(".territoryImage").height())
		$("#renderedSprites").css("width", $(".territoryImage").width())
		$("#background").css("height", $(".territoryImage").height())
		$(".filter").css("width", $(".territoryImage").width())
		$(".filter").css("height", $(".territoryImage").height())
		$("g").attr("transform", "scale(" + $(".territoryImage").attr("viewBox").split(" ")[2]/3508 + ")")
		//console.log($(".territoryImage").attr("viewBox").split(" ")[2]/3508);
	}

	function colorMap() {
		for (i = 0; i < territoryColors.length; i++) {
			$(territoryColors[i][0]).css("fill", "rgb(" + territoryColors[i][1][0] + "," + territoryColors[i][1][1] + "," + territoryColors[i][1][2] + ")")
		}
	}

	function parseDates() {
		var newRenderedForts = [];
		var newRenderedEncampments = [];
		date = Date.today();
		for (i = 0; i < rendered_forts.length; i++) {
			createDate = Date.parse(rendered_forts[i][0]["date"].slice(0,-5));
			if (createDate.getTime() <= date.getTime()) {
				newRenderedForts.push(rendered_forts[i]);
			}
		}
		for (i = 0; i < rendered_encampments.length; i++) {
			createDate = Date.parse(rendered_encampments[i][0]["date"].slice(0,-5));
			if (createDate.getTime() <= date.getTime()) {
				newRenderedEncampments.push(rendered_encampments[i]);
			}
		}
		rendered_forts = newRenderedForts
		rendered_encampments = newRenderedEncampments
	}

// I validate this serverside, don't get cheeky

	function calculateCost(StartingPoint, EndingPoint) {

		var canvas = document.getElementById("color_territory_active_canvas")
		var context = canvas.getContext("2d")
		var activeImage = document.getElementById("color_territory_active_image");
		context.drawImage(activeImage, 0, 0);

		if (StartingPoint[1] > EndingPoint[1]) {
			var temp = StartingPoint[1];
			StartingPoint[1] = EndingPoint[1]
			EndingPoint[1] = temp			
		}
		if (StartingPoint[0] > EndingPoint[0]) {
			var temp = StartingPoint[0];
			StartingPoint[0] = EndingPoint[0]
			EndingPoint[0] = temp			
		}
		//console.log(StartingPoint,EndingPoint)

		var total = 0;
		var percentInTerritory = [];
		var currentTerritory = [];
		var midPoint = [];
		var checkNext = "t";

		var mapData = context.getImageData(0,0,$("#color_territory_active_canvas").width(), $("#color_territory_active_canvas").height());

		if (Math.abs(StartingPoint[1] - EndingPoint[1]) >= Math.abs(StartingPoint[0] - EndingPoint[0])) {
			var slope = (StartingPoint[1] - EndingPoint[1])/(StartingPoint[0] - EndingPoint[0]);
			for (i = StartingPoint[0]; i <= EndingPoint[0]; i++ ) {
				for (y = 0; y < slope - 1; y++) {
					var imageData = [mapData["data"][3*(Math.round((3508*(StartingPoint[1] + i)) + (StartingPoint[0] + (i*slope) + y)))], mapData["data"][3*(Math.round((3508*(StartingPoint[1] + i)) + (StartingPoint[0] + (i*slope) + y))) + 1], mapData["data"][3*(Math.round((3508*(StartingPoint[1] + i)) + (StartingPoint[0] + (i*slope) + y))) + 2]];
					if (0x00 == imageData[0] && 0x00 == imageData[1] && 0x00 == imageData[2]) {
						checkNext = "t";
						midPoint[1] = StartingPoint[1] + (Math.round(slope*(i - 1))+y);
						currentTerritory.push(Math.abs(midPoint[0] - midPoint[1])/2); 
						percentInTerritory.push(currentTerritory);
					}
					else if (checkNext == "t") {
						currentTerritory = [];
						midPoint = [];
						var bellowTerritory
						for (var l = 0; l < colors.length; l++) {
							if (colors[l][1][0] == imageData[0] && colors[l][1][1] == imageData[1] && colors[l][1][2] == imageData[2]) {
								bellowTerritory = colors[l];
							}
						}
						currentTerritory.push(bellowTerritory);
						currentTerritory.push(1);
						midPoint[0] = StartingPoint[1] + (Math.round(slope*(i))+y); 
						checkNext = "f"
					}
					else {
						currentTerritory[1]++;
					}
				}
			}
			midPoint[1] = StartingPoint[1] + (Math.round(slope*(EndingPoint[0] - 1))+slope)
			currentTerritory.push(Math.abs(midPoint[0] - midPoint[1])/2); 
			percentInTerritory.push(currentTerritory);
			currentTerritory = [];
			midPoint = [];
		}
		else {
			var slope = (StartingPoint[0] - EndingPoint[0])/(StartingPoint[1] - EndingPoint[1]);
			for (i = StartingPoint[1]; i <= EndingPoint[1]; i++ ) {
				for (y = 0; y < slope - 1; y++) {
					var offsetFactor = -1;
					if (StartingPoint[1] + i == 0) {
						offsetFactor = 0;
					}
					////console.log(i - StartingPoint[1])
					////console.log(4*((3508*(StartingPoint[1] + (i - StartingPoint[1]) + offsetFactor)) + (StartingPoint[0] + ((i - StartingPoint[1]) * Math.round(slope)) + y)) )
					//console.log(mapData)
					var imageData = [mapData["data"][4*((3508*(StartingPoint[1] + (i - StartingPoint[1]) + offsetFactor)) + (StartingPoint[0] + ((i - StartingPoint[1]) * Math.round(slope)) + y))], mapData["data"][4*((3508*(StartingPoint[1] + (i - StartingPoint[1]) + offsetFactor)) + (StartingPoint[0] + ((i - StartingPoint[1]) * Math.round(slope)) + y)) + 1], mapData["data"][4*((3508*(StartingPoint[1] + (i - StartingPoint[1]) + offsetFactor)) + (StartingPoint[0] + ((i - StartingPoint[1]) * Math.round(slope)) + y)) + 2]];
					if (0x00 == imageData[0] && 0x00 == imageData[1] && 0x00 == imageData[2]) {
						checkNext = "t";
						midPoint[1] = StartingPoint[1] + i; 
						currentTerritory.push(Math.abs(midPoint[0] - midPoint[1])/2);
						percentInTerritory.push(currentTerritory);
					}
					else if (checkNext == "t") {
						currentTerritory = [];
						midPoint = [];
						var bellowTerritory
						for (var l = 0; l < colors.length; l++) {
							if (colors[l][1][0] == imageData[0] && colors[l][1][1] == imageData[1] && colors[l][1][2] == imageData[2]) {
								bellowTerritory = colors[l];
							}
						}
						//console.log(bellowTerritory)
						currentTerritory.push(bellowTerritory);
						currentTerritory.push(1);
						midPoint[0] = StartingPoint[1] + i; 
						checkNext = "f"
					}
					else {
						currentTerritory[1]++;
					}
				}
			}
			midPoint[1] = StartingPoint[1] + Math.abs(StartingPoint[1] - EndingPoint[1])
			currentTerritory.push(Math.abs(midPoint[0] - midPoint[1])/2); 
			percentInTerritory.push(currentTerritory);
			currentTerritory = [];
			midPoint = [];
		}
		for (i = 0; i < percentInTerritory.length; i++) {
			var distortionFactor = 0.0025*(Math.abs(1754 - percentInTerritory[i][2])) + .9722;
			if (percentInTerritory[i][0] !== undefined) {
				var infaFactor = colors[percentInTerritory[i][0]][3];
				total = total + (0.035*8.8642857143*distortionFactor*infaFactor*percentInTerritory[i][1]);
			}
			else {
				total = total + (0.0035*8.8642857143*distortionFactor*percentInTerritory[i][1]);
			}
		}
		return total;
	}
	//console.log(calculateCost([100,100],[300,301]))
	function calculate_lines(itinerary, i,switchback,level,gsf) {
				var sxco;
				var syco;
				var exco;
				var eyco;
				var fixco;
				var fiyco;
				var fiixco;
				var fiiyco;
				var gradient;
				var map_offset = $("#map").offset();
				if (itinerary[i] != "nil" && (itinerary[i - 1] != "nil" && itinerary[i - 1] != "nil" != itinerary[itinerary.length - 1])) {
					if (i != 0) {
						var fortTerritory
						var lastFortTerritory; 	
						for (g = 0; g < colors.length; g++) {
							if (colors[g][0] == itinerary[i][0]["territory"]) {
								fortTerritory = g; 	
							}
							if (colors[g][0] == itinerary[i - 1][0]["territory"]) {
								lastFortTerritory = g; 	
							}
						}
						//var cost = calculateCost([itinerary[i-1][0]["xco"] + colors[lastFortTerritory][2][0],itinerary[i-1][0]["yco"] + colors[lastFortTerritory][2][1]], [itinerary[i][0]["xco"] + colors[fortTerritory][2][0],itinerary[i][0]["yco"] + colors[fortTerritory][2][1]])
						itinerary[i] = itinerary[i].slice(0,2);
						itinerary[i - 1] = itinerary[i - 1].slice(0,2);
						if (level == "globe") {
							if (switchback != "f") {
								level = switchback;
								switchback = "f";
							}
							for (g = 0; g < continents.length; g++) {
								for (m = 0; m < continents[g].length; m++) {
									if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
										itinerary[i].push(continents[g][m], g);
									}
									if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
										itinerary[i - 1].push(continents[g][m], g);
									}
								}
							}
							fixco = (itinerary[i - 1][0]["xco"]*gsf) + (colors[itinerary[i - 1][2]][2][0] - color_key[itinerary[i - 1][3]][2][0])* gsf + (color_key[itinerary[i - 1][3]][2][0] *gsf);
							fiyco = (itinerary[i - 1][0]["yco"]*gsf) + (colors[itinerary[i - 1][2]][2][1] - color_key[itinerary[i - 1][3]][2][1]) * gsf + (color_key[itinerary[i - 1][3]][2][1] *gsf);
							fiixco = (itinerary[i][0]["xco"]*gsf) + (colors[itinerary[i][2]][2][0] - color_key[itinerary[i][3]][2][0]) * gsf + (color_key[itinerary[i][3]][2][0] *gsf);
							fiiyco = (itinerary[i][0]["yco"]*gsf) + (colors[itinerary[i][2]][2][1] - color_key[itinerary[i][3]][2][1]) * gsf + (color_key[itinerary[i][3]][2][1] *gsf);
						}
						if (level == "continent") {
							if (switchback != "f") {
								level = switchback;
								switchback = "f";
							}
							current_continent = color_key[clicked[1]][0];
							continent_index = clicked[1];
							var continent_offset = $(current_continent).offset();
							var sf = $(current_continent).width()/color_key[clicked[1]][3][0];
							for (m = 0; m < continents[clicked[1]].length; m++) {
								if (colors[continents[clicked[1]][m]][0] == itinerary[i][0]["territory"]) {
									itinerary[i].push(continents[clicked[1]][m]);
								}
								if (colors[continents[clicked[1]][m]][0] == itinerary[i - 1][0]["territory"]) {
									itinerary[i - 1].push(continents[clicked[1]][m]);
								}
							}
							if (itinerary[i][2] !== undefined && itinerary[i - 1][2] !== undefined) {

								fiixco = (itinerary[i][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[clicked[1]][2][0])*sf);
								fiiyco = (itinerary[i][0]["yco"] * sf) + ((colors[itinerary[i][2]][2][1] - color_key[clicked[1]][2][1])*sf) + (continent_offset.top - map_offset.top);
								fixco = (itinerary[i - 1][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[clicked[1]][2][0])*sf);
								fiyco = (itinerary[i - 1][0]["yco"] * sf) + ((colors[itinerary[i - 1][2]][2][1] - color_key[clicked[1]][2][1])*sf) + (continent_offset.top - map_offset.top);
							}
							else if (itinerary[i][2] !== undefined && itinerary[i - 1][2] === undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fixco = (itinerary[i][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[itinerary[i][3]][2][0])*sf) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0])*sf;
								fiyco = (itinerary[i][0]["yco"] * sf) + ((colors[itinerary[i][2]][2][1] - color_key[itinerary[i][3]][2][1])*sf) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1])*sf;
								fiixco = (itinerary[i - 1][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[clicked[1]][2][0])*sf);
								fiiyco = (itinerary[i - 1][0]["yco"] * sf) + ((colors[itinerary[i - 1][2]][2][1] - color_key[clicked[1]][2][1])*sf) + (continent_offset.top - map_offset.top);	
							gradient = [true,"exco"];
							}
							else if (itinerary[i][2] === undefined && itinerary[i - 1][2] !== undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fixco = (itinerary[i][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[clicked[1]][2][0])*sf);
								fiyco = (itinerary[i][0]["yco"] * sf) + ((colors[itinerary[i][2]][2][1] - color_key[clicked[1]][2][1])*sf) + (continent_offset.top - map_offset.top);
								fiixco = (itinerary[i - 1][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[itinerary[i][3]][2][0])*sf) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0])*sf;
								fiiyco = (itinerary[i - 1][0]["yco"] * sf) + ((colors[itinerary[i - 1][2]][2][1] - color_key[itinerary[i][3]][2][1])*sf) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1])*sf;
							gradient = [true,"sxco"];
							}
							else if (itinerary[i][2] === undefined && itinerary[i - 1][2] === undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fiixco = (itinerary[i][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[itinerary[i][3]][2][0])*sf) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0])*sf;
								fiiyco = (itinerary[i][0]["yco"] * sf) + ((colors[itinerary[i][2]][2][1] - color_key[itinerary[i][3]][2][1])*sf) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1])*sf;
								fixco = (itinerary[i - 1][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[itinerary[i][3]][2][0])*sf) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0])*sf;
								fiyco = (itinerary[i - 1][0]["yco"] * sf) + ((colors[itinerary[i - 1][2]][2][1] - color_key[itinerary[i][3]][2][1])*sf) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1])*sf;
							}
						}
						if (level == "territory") {
							if (switchback != "f") {
								level = switchback;
								switchback = "f";
							}
							fixco = itinerary[i - 1][1][0];
							fiyco = itinerary[i - 1][1][1];
							fiixco = itinerary[i][1][0];
							fiiyco = itinerary[i][1][1];
							var current_continent;
							var continent_index;
							var territory_index;
							for (o = 0; o < continents.length; o++) {
								for (u = 0; u < continents[o].length; u++) {
									if (continents[o][u] == clicked[1]) {
										current_continent = color_key[o][0];
										continent_index = o;
										territory_index = continents[o][u];
									}
								}
							}
							var tsf = $(colors[territory_index][0]).width()/parseInt($(colors[territory_index][0]).css("max-width"));
							var continent_offset = $(current_continent).offset();
							var sf = $(current_continent).width()/color_key[continent_index][3][0];
							if (colors[territory_index][0] == itinerary[i][0]["territory"]) {
								itinerary[i].push(territory_index);
							}
							if (colors[territory_index][0] == itinerary[i - 1][0]["territory"]) {
								itinerary[i - 1].push(territory_index);
							}
							if (itinerary[i][2] !== undefined && itinerary[i - 1][2] !== undefined) {

								fixco = itinerary[i - 1][1][0];
								fiyco = itinerary[i - 1][1][1];
								fiixco = itinerary[i][1][0];
								fiiyco = itinerary[i][1][1];
							}
							else if (itinerary[i][2] !== undefined && itinerary[i - 1][2] === undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fixco = ((itinerary[i - 1][0]["xco"]) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[itinerary[i - 1][3]][2][0])) + (color_key[itinerary[i - 1][3]][2][0] - color_key[continent_index][2][0]))*tsf;
								fiyco = ((itinerary[i - 1][0]["yco"]) + ((colors[itinerary[i - 1][2]][2][1] - color_key[itinerary[i - 1][3]][2][1])) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i - 1][3]][2][1] - color_key[continent_index][2][1]))*tsf;
								fiixco = itinerary[i][1][0];
								fiiyco = itinerary[i][1][1];
								gradient = [true,"sxco"];
								
							}
							else if (itinerary[i][2] === undefined && itinerary[i - 1][2] !== undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fixco = itinerary[i - 1][1][0];
								fiyco = itinerary[i - 1][1][1];
								fiixco = ((itinerary[i][0]["xco"]) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[itinerary[i][3]][2][0])) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0]))*tsf;
								fiiyco = ((itinerary[i][0]["yco"]) + ((colors[itinerary[i][2]][2][1] - color_key[itinerary[i][3]][2][1])) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1]))*tsf;
								gradient = [true,"exco"];
							}
							else if (itinerary[i][2] === undefined && itinerary[i - 1][2] === undefined) {
								for (g = 0; g < continents.length; g++) {
									for (m = 0; m < continents[g].length; m++) {
										if (colors[continents[g][m]][0] == itinerary[i][0]["territory"]) {
											itinerary[i][2] = continents[g][m]
											itinerary[i][3] = g;
										}
										if (colors[continents[g][m]][0] == itinerary[i - 1][0]["territory"]) {
											itinerary[i - 1][2] = continents[g][m]
											itinerary[i - 1][3] = g;
										}
									}
								}
								fixco = ((itinerary[i - 1][0]["xco"]) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i - 1][2]][2][0] - color_key[itinerary[i - 1][3]][2][0])) + (color_key[itinerary[i - 1][3]][2][0] - color_key[continent_index][2][0]))*tsf;
								fiyco = ((itinerary[i - 1][0]["yco"]) + ((colors[itinerary[i - 1][2]][2][1] - color_key[itinerary[i - 1][3]][2][1])) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i - 1][3]][2][1] - color_key[continent_index][2][1]))*tsf;
								fiixco = ((itinerary[i][0]["xco"]) + (continent_offset.left - map_offset.left) + ((colors[itinerary[i][2]][2][0] - color_key[itinerary[i][3]][2][0])) + (color_key[itinerary[i][3]][2][0] - color_key[continent_index][2][0]))*tsf;
								fiiyco = ((itinerary[i][0]["yco"]) + ((colors[itinerary[i][2]][2][1] - color_key[itinerary[i][3]][2][1])) + (continent_offset.top - map_offset.top) + (color_key[itinerary[i][3]][2][1] - color_key[continent_index][2][1]))*tsf;
							}
						}
					}
				}
						var a = 32;
						if (level == "globe") {
							a = a * gsf;
						}
						else if (level == "continent") {
							var sf = $(current_continent).width()/color_key[clicked[1]][3][0];
							a = a*sf
						}
						if (fixco > fiixco) {
							sxco = fixco;
							exco = (fiixco + a);
							if (fiyco > fiiyco) {
								syco = fiyco
								eyco = (fiiyco + a);
							}
							else {
								syco = (fiyco + a)
								eyco = fiiyco;
							}
						}
						else {
							sxco = (fixco + a);
							exco = fiixco;

							if (fiyco > fiiyco) {
								syco = fiyco
								eyco = (fiiyco + a);
							}
							else {
								syco = (fiyco + a)
								eyco = fiiyco;
							}
						}
		return [sxco,syco,exco,eyco,switchback,level,fiixco,fiiyco,fixco,fiyco,gradient];
	}

	function render_trade_route(level) {
	
		var gsf = $("#map").width()/3508;
		var map_offset = $("#map").offset();
		clear_canvas("create_sprite_canvas");
		var csc = document.getElementById("create_sprite_canvas");
		var cstx = csc.getContext("2d");
		var continent_index;
		var current_continent;
		var switchback = "f";
		var co = [];
			for (i = 0; i < itinerary.length; i++) {
				var line = calculate_lines(itinerary,i,switchback,level,gsf);
				var sxco = line[0];
				var syco = line[1];
				var exco = line[2];
				var eyco = line[3];
				var fiixco = line[6];
				var fiiyco = line[7];
				switchback = line[4];
				level = line[5];
				var fixco = line[8]
				var fiyco = line[9];
				var gradient = line[10];
						if (sxco !== undefined && isNaN(sxco) != "true" && switchback == "f") {
							if (i == selected - 2) {
								var cimg;
								var using_forts
								if (itinerary[i] == "nil") {
									if (itinerary[i - 1] != itinerary[itinerary.length - 1]) {
										using_forts = calculate_lines(itinerary,(i - 1),switchback,level,gsf);
									}
									else {
										using_forts = calculate_lines(itinerary,(i + 1),switchback,level,gsf);
									}
								}
								else {
									using_forts = calculate_lines(itinerary,i,switchback,level,gsf);
								}
									using_forts = using_forts.slice(6,8);
								if (level == "territory" || switchback == "territory") {
									if (switchback == "f" || switchback == "territory") {
										cimg = document.getElementById("selection_circle");
									}
								}
								else if (level == "continent" || switchback == "continent") {
									if (switchback == "f" || switchback == "continent") {
										cimg = document.getElementById("selection_circle");
									}
								}
								else if (level == "globe" || switchback == "globe") {
									if (switchback == "f" || switchback == "globe") {
										cimg = document.getElementById("small_selection_circle");
									}
								}
								cstx.drawImage(cimg,using_forts[0],using_forts[1]);
							}
							var m = (syco - eyco)/(sxco - exco);
							var b = -1*((m*sxco) - syco);
							var contextcox;
							var contextcoy;
							var curr_continent = clicked[1];
							if (level == "territory") {
								for (r = 0; r < continents.length; r++) {
									for (s = 0; s < continents[r].length; s++) {
										if (clicked[1] == continents[r][s]) {
											curr_continent = r;
										}
									}
								}
							}
							var incperct = $(".map").height()
							var incperct = incperct*0.05;
							if (eyco >= syco) {
								contextcoy = syco;
							}
							else if (syco > eyco) {
								contextcoy = eyco;
							}
							if (exco >= sxco) {
								contextcox = sxco + (exco - sxco)/2;
							}
							else if (sxco > exco) {
								contextcox = exco + (sxco - exco)/2;
							}
							var gradone;
							var gradetwo;
							if (isNaN(sxco) != true && gradient !== undefined) { 	
								if (gradient[1] == "exco") {
									if (exco >= sxco) { 
										exco = $(color_key[curr_continent][0]).width() + $(color_key[curr_continent][0]).position().left;
									}
									else if (exco < sxco) {
										exco = $(color_key[curr_continent][0]).position().left;
									}
									eyco = m*exco + b;
									gradone = cstx.createLinearGradient(sxco, syco, exco, eyco);
									gradone.addColorStop(0, "black");
									gradone.addColorStop(1, "transparent");
								}
								else if (gradient[1] == "sxco") {
									if (sxco >= exco) { 
										sxco = $(color_key[curr_continent][0]).width() + $(color_key[curr_continent][0]).position().left;
									}
									else if (sxco < exco) {
										sxco = $(color_key[curr_continent][0]).position().left;
									}
									syco = m*sxco + b;
									gradone = cstx.createLinearGradient(sxco, syco, exco, eyco);
									gradone.addColorStop(0, "transparent");
									gradone.addColorStop(1, "black");
								}	
								gradetwo = cstx.createLinearGradient(sxco, syco, exco, eyco);
								if (gradient[1] == "exco") {
								gradetwo.addColorStop(0, "white");
								gradetwo.addColorStop(1, "transparent");
								}
								else if (gradient[1] == "sxco") {
								gradetwo.addColorStop(0, "transparent");
								gradetwo.addColorStop(1, "white");
								}
							}
							else 
							if (gradone === undefined) {
								gradone = "#000000"
								gradetwo = "#ffffff"
							}
      						cstx.beginPath();
							cstx.moveTo(sxco, syco);
							cstx.quadraticCurveTo((contextcox), (contextcoy - incperct), exco, eyco);
							cstx.lineWidth = 2;
							cstx.strokeStyle = gradone;
							cstx.stroke();
      						cstx.beginPath();
							cstx.moveTo(sxco, syco - 3);
							cstx.quadraticCurveTo((contextcox), (contextcoy - incperct) - 3, exco, eyco - 3);
							cstx.lineWidth = 3;
							cstx.strokeStyle = gradetwo;
							cstx.stroke();
      						cstx.beginPath();
							cstx.moveTo(sxco, syco - 5);
							cstx.quadraticCurveTo((contextcox), (contextcoy - incperct) - 5, exco, eyco - 5);
							cstx.lineWidth = 2;
							cstx.strokeStyle = gradone;
							cstx.stroke();
							for (j = 0; j < co.length; j++) {
								if (co[j] === undefined) {
									co.push([i,exco,eyco]);
								}
								else {
									co[j] = [i,exco,eyco];
								}
							}
						}
					}
	}

	function render_trade() {
		$('.test1').append('<canvas id="create_sprite_canvas" class="canvas" style="z-index:300;" width=' + $(".map").width() + ' height=' +  $(".map").height() + '>');
		placing = "t";
		var list = [<%= render partial: "fort", collection: @forts %>];
		var forts = [];
		itinerary = [];
		selected = 0;

			$(document).click( function(e) {
					clear_create_canvas = "t";
					var csc = document.getElementById("create_sprite_canvas");
					var csctx = csc.getContext("2d");
					var cimg = document.getElementById("selection_circle");

					var n = document.elementFromPoint(e.pageX, e.pageY);
					var num = n.id.slice(-1);
					n = n.id;
					n = n.replace(num,"");
					if (n == "cancel") {
						n = num;
						n = parseInt(n);
						clear_canvas("create_sprite_canvas");
						selected = n;
						itinerary[n] = "nil";

						for (y = 0; y < itinerary.length; y++) {
							if (itinerary[y] != "nil") {
								var location = itinerary[y][0]["territory"];
								location = location.replace("#","");
								var location = location.slice(0,1).replace(location.slice(0,1), location.slice(0,1).toUpperCase()).concat(location.slice(1, location.length));
								for (j = 0; j < continents.length; j++) {
									for (l = 0; l < continents[j].length; l++) {
										if (colors[continents[j][l]][0] == itinerary[y][0]["territory"]) {
											var continent = color_key[j][0];
											continent = continent.replace("#","");
											continent = continent.slice(0,1).replace(continent.slice(0,1), continent.slice(0,1).toUpperCase()).concat(continent.slice(1, continent.length));
											location = location.concat(", ".concat(continent));		
											while (location.indexOf("_") != -1) {
												var l = location.indexOf("_");
												l = "_".concat(location.charAt(1 + l));
												location = location.replace(l," ".concat(l.charAt(1).toUpperCase()));
											}						
										}
									}
								}
							}
								if (itinerary.length > 1) {
								$("#submitTrade").remove();
								$("div#submitTradeDiv").html("<button id='submitTrade'>Submit Shipping Proposal</button>");
								}
								else {
								$("#submitTrade").remove();
								}

								var index = y + 1;
							if (y == 0) {
								var what = $(".commodity_sprite");
								if (itinerary[y] == "nil") {
									$("div#create_trade").html("<p id='fort" + index + "'>Leg " + index + ": " + "</p><br>");
								}
								else {
									$("div#create_trade").html("<p id='fort" + index + "'>Leg " + index + ": " + itinerary[y][0]["name"] +  " " + location +"</p><button  class='trade_leg_cancel' id='cancel" + y  + "'>Change Fort</button><br>");
								}
							}
							else if (y > 0 && y < (itinerary.length - 1)) {
								if (itinerary[y] == "nil") {
									$("div#create_trade").append("<p id='fort" + index + "'>Leg " + index + ": " + "</p><br>");
								}
								else {
									$("div#create_trade").append("<p id='fort" + index + "'>Leg " + index + ": " + itinerary[y][0]["name"] +  " " + location +"</p><button  class='trade_leg_cancel' id='cancel" + y  + "'>Change Fort</button><br>");
								}
							}
							else if (y == (itinerary.length - 1)) {
								if (itinerary[y] == "nil") {
									$("div#create_trade").append("<p id='fort" + index + "'>Leg " + index + ": " + "</p>");
								}
								else {
									$("div#create_trade").append("<p id='fort" + index + "'>Leg " + index + ": " + itinerary[y][0]["name"] +  " " + location +"</p><button  class='trade_leg_cancel' id='cancel" + y  + "'>Change Fort</button>");
								}
							}
						$("div#create_trade").prepend(what);
						}
						if (itinerary[(n - 1)] === undefined) {
							clear_canvas("create_sprite_canvas");
							render_trade_route("territory");
						}
						else {
							clear_canvas("create_sprite_canvas");
							render_trade_route("territory");
						}
						exception = "t";
					}
				});

		$("#submitTradeDiv").click(function(submitEvent) {
			var submitElem = document.elementFromPoint(submitEvent.pageX, submitEvent.pageY);
			if (submitElem.id == "submitTrade") {
				$("#edit_user_1").submit();
			}
		});

		$(".test1").click( function(e) {
			clear_create_canvas = "t";
			clear_canvas("create_sprite_canvas");
			var csc = document.getElementById("create_sprite_canvas");
			var csctx = csc.getContext("2d");
			var cimg = document.getElementById("selection_circle");

			forts = [];
			var map_offset = $(".test1").offset();
			var cxco = e.pageX - map_offset.left;
			var cyco = e.pageY - map_offset.top;

			if (level == "territory") {
				var territory = colors[clicked[1]][0];
				territory_offset = $(territory).offset();
				var sf = parseInt($(territory).css("max-width")) /$(territory).width();
				var index = 0;

				for (i = 0; i < list.length; i++) {
					if (list[i][0]["owner"] == '<%= @user.id %>') {
						if (list[i][0]["territory"] == colors[clicked[1]][0])	{
							forts.push([list[i][0]]);
							forts[index].push([((list[i][0]["xco"])*sf) + (territory_offset.left - map_offset.left), ((list[i][0]["yco"])*sf) + (territory_offset.top - map_offset.top)]);
							index++;
						}
					}
				}

				for (y = 0; y < forts.length; y++) {
					if (((cxco >= forts[y][1][0])  &&  ((forts[y][1][0] + 32) >= cxco)) && ((cyco >= forts[y][1][1])  &&  ((forts[y][1][1] + 32) >= cyco)))	{
						if (itinerary.length > selected) {
							itinerary[selected] = forts[y];
							clear_canvas("create_sprite_canvas");
							selected = (itinerary.length + 1);
							exception = "t";
						}
						else {

							itinerary.push(forts[y]);
							exception = "t";
							clear_canvas("create_sprite_canvas");
							selected = (itinerary.length + 1);
							if (itinerary.length % 2 == 1) {
						    clickButton("create_leg");	
							var n = itinerary.length + 1;
							}
							if (itinerary.length > 1) {
							$("#submitTrade").remove();
							$("div#submitTradeDiv").html("<button id='submitTrade'>Submit Shipping Proposal</button>");
							}
							else {
							$("#submitTrade").remove();
							}
						}
					}
				}
							for (n = 0; n < itinerary.length; n++) {
								var location = itinerary[n][0]["territory"];
								location = location.replace("#","");
								var location = location.slice(0,1).replace(location.slice(0,1), location.slice(0,1).toUpperCase()).concat(location.slice(1, location.length));
								for (j = 0; j < continents.length; j++) {
									for (l = 0; l < continents[j].length; l++) {
										if (colors[continents[j][l]][0] == itinerary[n][0]["territory"]) {
											var continent = color_key[j][0];
											continent = continent.replace("#","");
											continent = continent.slice(0,1).replace(continent.slice(0,1), continent.slice(0,1).toUpperCase()).concat(continent.slice(1, continent.length));
											location = location.concat(", ".concat(continent));	
											while (location.indexOf("_") != -1) {
												var l = location.indexOf("_");
												l = "_".concat(location.charAt(1 + l));
												location = location.replace(l," ".concat(l.charAt(1).toUpperCase()));
											}
										}
									}
								}
								var index = n + 1;

								if (n == 0) {
								var what = $(".commodity_sprite");
									if (itinerary[n] == "nil") {
										$("div#create_trade").html("<p id='fort" + n + "'>Leg " + index + ": " + "</p><br>");
									}
									else {
										$("div#create_trade").html("<p id='fort" + n + "'>Leg " + index + ": " + itinerary[n][0]["name"] + " " + location +"</p><button class='trade_leg_cancel' id='cancel" + n  + "'>Change Fort</button><br>");
									}
								}
								else if (n > 0 && n < (itinerary.length - 1)) {
									if (itinerary[n] == "nil") {
										$("div#create_trade").append("<p id='fort" + n + "'>Leg " + index + ": " + "</p><br>");
									}
									else {
										$("div#create_trade").append("<p id='fort" + n + "'>Leg " + index + ": " + itinerary[n][0]["name"] +  " " + location + "</p><button class='trade_leg_cancel' id='cancel" + n  + "'>Change Fort</button><br>");
									}
								}
								else if (n == (itinerary.length - 1)) {
									if (itinerary[n] == "nil") {
										$("div#create_trade").append("<p id='fort" + n + "'>Leg " + index + ": " + "</p>");
									}
									else {
										$("div#create_trade").append("<p id='fort" + n + "'>Leg " + index + ": " + itinerary[n][0]["name"] +  " " + location +"</p><button class='trade_leg_cancel' id='cancel" + n  + "'>Change Fort</button>");
									}
								}
								$("div#create_trade").prepend(what);
							}
						placing = "f";
						render_trade_route("territory");
			}
		});
	}

function terminate_form(object_id) {
	$('#create_sprite_canvas').remove();
	$("#submit").css("display","none");
	$(".fields").css("display","none");
	$("#cancel_form").css("display","none");
	if (english_level == "territory") {
		$("#create_fort").css("display","inline");
		$("#create_camp").css("display","inline");
		$("#create_trade").css("display","inline");
	}
	else {
		$("#create_fort").css("display","none");
		$("#create_camp").css("display","none");
		$("#create_trade").css("display","none");
	}
	exception = "t";
}

function place_object(object_id) {
	placing = "t";
	var functional_placing = "t";
	$("#cancel_form").click( function(event) {
		placing = "f";
		functional_placing = "f";
		terminate_form(object_id);

	});
	$('.test1').append('<canvas id="create_sprite_canvas" style="z-index:101;" width=' + $(".map").width() + ' height=' +  $(".map").height() + '>');
	var sc = document.getElementById("create_sprite_canvas");
	var sctx = sc.getContext("2d");
	var img = document.getElementById(object_id);
	var ui_offset = $(".test1").offset();
	var continent_offset = $(colors[clicked[1]][0]).offset();
	$("#create_sprite_canvas").css("z-index","32");

	$('body').append('<canvas id="territory_canvas" class="temp_canvas" width=' + 3508 + ' height=' +  1956 + '>');
	var tc = document.getElementById("territory_canvas");
	var tctx = tc.getContext("2d");
	var img2 = document.getElementById(colors[clicked[1]][0].replace("#",""));
	tctx.drawImage(img2,0,0);

	$(".test1").mousemove( function(event) {
		if (functional_placing == "t") {
	
			clear_canvas("create_sprite_canvas");
			sctx.drawImage(img,(event.pageX - ui_offset.left) ,(event.pageY - ui_offset.top));

		}

	});
	
	$(".test1").click( function(event) {
		if (functional_placing == "t") {
			
			clear_for_clicks("move");
			$("#create_sprite_canvas").css("z-index","-80");
			var elem = document.elementFromPoint(event.pageX, event.pageY);
			
			$("#territory_sprites").css("z-index","50");
			$("#create_sprite_canvas").css("z-index","51");
			var last_click = colors[clicked[1]][0];
			last_click = last_click.replace("#","");
			if (elem.id == last_click) {

				var sf = parseInt($(colors[clicked[1]][0]).css("max-width"))/$(colors[clicked[1]][0]).width();
				var pixelData = tc.getContext('2d').getImageData(((event.pageX - continent_offset.left)*sf), ((event.pageY - continent_offset.top)*sf), 1, 1).data;
				if (pixelData[3] != 0x00) {
					$("#territory_canvas").remove();
					var territory_offset = $(colors[clicked[1]][0]);
					functional_placing = "f";
					$("#user_encampments_attributes_100000000000_xco").val((event.pageX - continent_offset.left)/sf);
					$("#user_encampments_attributes_100000000000_yco").val((event.pageY - continent_offset.top)/sf);
					$("#user_encampments_attributes_100000000000_territory").val(colors[clicked[1]][0]);
					$("#user_encampments_attributes_100000000000_date_created").val(Date.today().add(1).days());
					return 1;

					
				}
			}
			
		} 

	});

}

function clear_for_clicks(action, canvas) {
	
	previous_level[0] = $(".territory_sprites").css("z-index");
	previous_level[1] = $(".continent_sprites").css("z-index");

	if (action == "move") {
		$(".canvas").css("z-index","-30");
	}
	else if (action == "put back") {
		$("#create_sprite_canvas").css("z-index", previous_level[2]);
	}
}

function clear_canvas(id) {
	var canvas = document.getElementById(id);
	var canvastx = canvas.getContext("2d");
	var with_hash = "#".concat(id);
	canvastx.clearRect ( 0 , 0 , $(with_hash).width(), $(with_hash).height() );
}



function render_object(level, clear, object, list) {
list = eval(list);
	map_offset = $(".test1").offset();
	if (level == 4) {
		var current_territory = colors[clicked[1]][0];
		var forts_to_be_rendered = [];
		for (i = 0; i < list.length; i++) {
			var temp_terr = list[i];
			if (temp_terr[0]["territory"] == current_territory) {
				forts_to_be_rendered.push(list[i][0]);
			}
		}
		
		var tsc = document.getElementById("territory_sprites");
		var tsctx = tsc.getContext("2d");
		if (clear == "t") {
			tsc.width = tsc.width;
		}
		var territory_offset = $(current_territory).offset();
		var div_offset = $(".map").offset();
		var sf = parseInt($(current_territory).css("max-width")) /$(current_territory).width();
		
		for (i = 0; i < forts_to_be_rendered.length; i++) {
		
			var xco = ((forts_to_be_rendered[i]["xco"])*sf) + (territory_offset.left - div_offset.left);
			var yco = ((forts_to_be_rendered[i]["yco"])*sf) + (territory_offset.top - div_offset.top);
			var img = document.getElementById(object);
			tsctx.drawImage(img,xco,yco);
		}

	}

	else if (level == 2) {
		var current_continent = color_key[clicked[1]][0];
		var forts_to_be_rendered = [];
		var territory_list = continents[clicked[1]];
		
		for (i = 0; i < list.length; i++) {
			for (y = 0; y < territory_list.length; y++) {
					if (list[i][0]["territory"] == colors[territory_list[y]][0]) {
						forts_to_be_rendered.push([list[i][0], clicked[1], territory_list[y]]);
					}
			}
		}
		var csc = document.getElementById("continent_sprites");
		var csctx = csc.getContext("2d");
		if (clear == "t") {
			csc.width = csc.width;
		}
		var continent_offset = $(current_continent).offset();
		var sf = $(current_continent).width()/color_key[clicked[1]][3][0];
		previous_level[2] = $(".canvas").css("z-index");
		$(".canvas").css("z-index","0");
		$("#continent_sprites").css("z-index","34");
		for (i = 0; i < forts_to_be_rendered.length; i++) {
			var xco = (forts_to_be_rendered[i][0]["xco"] * sf) + (continent_offset.left - map_offset.left) + ((colors[forts_to_be_rendered[i][2]][2][0] - color_key[forts_to_be_rendered[i][1]][2][0])*sf);
			var yco = (forts_to_be_rendered[i][0]["yco"] * sf) + ((colors[forts_to_be_rendered[i][2]][2][1] - color_key[forts_to_be_rendered[i][1]][2][1])*sf) + (continent_offset.top - map_offset.top);
			var img = document.getElementById(object);
			csctx.drawImage(img,xco,yco);
		}
	}
}


function push_object(data, object, list, g_list) {
	g_list = eval(g_list)
	g_list.push(data);
	list.push(data);
	setTimeout(render_object(4,"f",object, list), 0);
	last_submited_name = name;
}


var nwidth = $(".map").width();
var nheight = $(".map").height();

$('.test1').append('<canvas id="territory_sprites" class="canvas" style="z-index:-3;" width=' + nwidth + ' height=' +  nheight + '>');
$('.test1').append('<canvas id="continent_sprites" class="canvas" style="z-index:-3;" width=' + nwidth + ' height=' +  nheight + '>');

var level;
clicked = ["f", 1];
var last_submited_name;

var creating = "f";
var submited = "f";
var sudoajaxstring = "nil";

var c=document.getElementById("myCanvas");
var ctx=c.getContext("2d");

	$('#create_fort').click( function(e) {

			var field_num = $(".fields").length

			if (field_num != 1) {

			$(".fields").css("display","inline");
			$(".fields:not(#fort_fields)").remove();
				if ($(".fields").length != 1) {
					$(".fields:first").remove();
				}
			}
			$("#cancel_form").css("display","inline");
			$("#create_camp").css("display","none");
			$("#create_trade").css("display","none");
			submited = "f";
			creating = "t";
			$("#create_fort").css("display","none");
			$("#submit").css("display","inline");
			var functional_placing = "t";
			placing = "t";
			var nw = $('.map').width();
			var nh = $('.map').height();
			var sxco;
			var syco;

			var aoffset = $(".test1").offset();

			$('.test1').append('<canvas id="create_sprite_canvas" class="canvas" style="z-index:32;" width=' + nw + ' height=' +  nh + '>');
			var sc = document.getElementById("create_sprite_canvas");
			var sctx = sc.getContext("2d");
			$("#create_sprite_canvas").css("z-index","32");

			$("#cancel_form").click( function(event) {
				placing = "f";
				functional_placing = "f";
				terminate_form("fort");

			});
			$(".test1").mousemove( function(event) {

				if (functional_placing == "t") {

					sctx.clearRect(0, 0, sc.width, sc.height);

					var fort = document.getElementById('fort');
				

					sctx.drawImage(fort,((event.pageX - aoffset.left) - 32), ((event.pageY - aoffset.top) - 32));
			
					sxco = event.pageX;
					syco = event.pageY;
				}



				$('.test1').click( function(etoo) {
					clear_for_clicks("move");
					$(colors[clicked[1]][0]).css("z-index","31");
					var telem = document.elementFromPoint(etoo.pageX, etoo.pageY);
					clear_for_clicks("put back", ["territory"]);
					$("#create_sprite_canvas").css("z-index","51");
					$("#territory_sprites").css("z-index","50");
					var name_w_hash = colors[clicked[1]][0];
					name_w_hash = name_w_hash.replace(/#/g, '');

					if (telem.id == name_w_hash) {

						var tempw = $(colors[clicked[1]][0]).width();
						var temph = $(colors[clicked[1]][0]).height();
						$('body').append('<canvas id="new_canvas" style="z-index:5; display:none;" width=' + tempw + ' height=' +  temph + '</canvas>');

						var nc=document.getElementById("new_canvas");
						var nctx=nc.getContext("2d");
						var territ = document.getElementById(name_w_hash);
						nctx.drawImage(territ,0,0);

						var ctoffset = $(colors[clicked[1]][0]).offset();

						var tpixelData = nc.getContext('2d').getImageData((etoo.pageX - ctoffset.left), (etoo.pageY - ctoffset.top), 1, 1).data;
						
						var sxco = etoo.pageX - ctoffset.left;
						var syco = etoo.pageY - ctoffset.top;

						if (tpixelData[3] != 0x00) {

							var dw = $(colors[clicked[1]][0]).width();
							var ow = parseInt($(colors[clicked[1]][0]).css("max-width"));

							if (dw != ow) {
								var wsf = dw/ow;
								sxco = sxco/wsf;
								syco = syco/wsf;
							}

							$("#user_forts_attributes_100000000000_xco").val(sxco);
							$("#user_forts_attributes_100000000000_yco").val(syco);
							$("#user_forts_attributes_100000000000_territory").val(colors[clicked[1]][0]);
							$("#user_forts_attributes_100000000000_date_created").val(Date.today().add(60).days());

							functional_placing = "f";
						}

					}
					$("#create_sprite_canvas").css("z-index","39");
					$(colors[clicked[1]][0]).css("z-index","4");
					$('#new_canvas').remove();

				});

			});
			var submissions = 0;

				$("#submit").click( function(e) {
					placing = "f";
					submissions++;
					push_object([{name:$("#user_forts_attributes_100000000000_name").val(), ownership:$("#user_forts_attributes_100000000000_ownership").val(), territory:$("#user_forts_attributes_100000000000_territory").val(), xco:$("#user_forts_attributes_100000000000_xco").val(), yco:$("#user_forts_attributes_100000000000_yco").val()}],"fort",[<%= render partial: "fort", collection: @forts %>],"rendered_forts");
					parseDates();
					$('#create_sprite_canvas').remove();
					$("#submit").css("display","none");
					$(".fields").css("display","none");
					$("#cancel_form").css("display","none");
					if (trading != "t") {
						$("#create_fort").css("display","inline");
						$("#create_camp").css("display","inline");
					}
					$("#create_trade").css("display","inline");
					creating = "f"
				});
	});


	$('#create_camp').click( function(e) {

		$(".fields:not(#encampment_fields)").remove();
			if ($(".fields").length != 1) {
				$(".fields:first").remove();
			}
		
		$("#cancel_form").css("display","inline");
		$("#submit").css("display","inline");
		$("#create_camp").css("display","none");
		$("#create_fort").css("display","none");
		$("#create_trade").css("display","none");
		place_object("encampment");
		$("#submit").click( function(e) {
			push_object([{name:$("#user_encampments_attributes_100000000000_name").val(), territory:$("#user_encampments_attributes_100000000000_territory").val(), xco:$("#user_encampments_attributes_100000000000_xco").val(),yco:$("#user_encampments_attributes_100000000000_yco").val()}],"encampment",[<%= render partial: "encampment", collection: @encampments %>],"rendered_encampments");
				parseDates();
				$("#cancel_form").css("display","none");
				$('#create_sprite_canvas').remove();
				$("#submit").css("display","none");
				$(".fields").css("display","none");
				if (trading != "t") {
					$("#create_fort").css("display","inline");
					$("#create_camp").css("display","inline");
				}
				$("#create_trade").css("display","inline");
				$(".fields").css("display","none");
				exception = "t";
				placing = "f";
		});
		
	});

	$("#create_trade").click( function(e) {
		trading = "t";
		var field_num = $(".fields").length
		if (field_num != 1) {
			$(".fields").css("display","inline");
			$(".fields:first").remove();
		}
		exception = "t";
		$("#cancel_form").css("display","inline");
		$("#create_camp").css("display","none");
		$("#create_fort").css("display","none");
		$("#create_trade").css("display","none");
		<%= render partial: "commodity_images" %>
		$("#cancel_form").click( function(event) {
			trading = "f";
			itinerary = []
			$("div#create_trade").text("");
			$(".trade_button").css("display","none");
			placing = "f";
			terminate_form("nil");
			$("#submitTrade").remove();
		});
		render_trade();
		$("#submitTrade").click( function(e) {
			trading = "f";
			$("#submit").click();
			$("#cancel_form").css("display","none");
			$('#create_sprite_canvas').remove();
			$("#submit").css("display","none");
			$(".fields").css("display","none");
			if (trading != "t") {
				$("#create_fort").css("display","inline");
				$("#create_camp").css("display","inline");
			}
			$("#create_trade").css("display","inline");
			placing = "f";
		});
	});
	$("div#create_trade").click(function(e) {
		var commodity = document.elementFromPoint(e.pageX,e.pageY)
		if ($(commodity).attr("class") == "commodity_sprite" && commodity.id != "chooseNewWhat") {
			var itineraryId = commodity.id;
			$("#user_trades_attributes_100000000000_what").val(itineraryId);
			var image = $("#".concat(itineraryId));
			$("div.sprite_div").remove();
			$(".commodity_sprite").remove();
			var pathHTML = $("div#create_trade").children();
			$("div#create_trade").html(image);
			$("div#create_trade").append("<button id='chooseNewWhat' class='commodity_sprite' >Choose Other</button>");
			$("div#create_trade").append(pathHTML);
		}
		else if ($(commodity).attr("id") == "chooseNewWhat") {
			$("#user_trades_attributes_100000000000_what").val("");
			$("div.sprite_div").remove();
			$(".commodity_sprite").remove();
			var pathHTML = $("div#create_trade").children();
			<%= render partial: "commodity_images" %>
			$("div#create_trade").append(pathHTML);
		}
	});



var last_continent;

	function renderObject(object,levelInfo) {
		var list;
		if (object == "encampment") {
			list = rendered_encampments; 
		}
		else if (object == "fort") {
			list = rendered_forts; 
		}
		var sortedList = [];
		if (levelInfo[0] == "territorial") {
			for (i = 0; i < list.length; i++) {
				if (list[i][0].territory == levelInfo[1]) {
					sortedList.push(list[i]);
				}
			}
		}
		else if (levelInfo[0] == "continental") {
			var children = $("continentalSVG").children();
			for (i = 0; i < list.length; i++) {
				for (y = 0; children.length; y++) {
					if ("#".concat(children[y].id) == list[i].territory) {
						sortedList.push(list[i]);
					}
				}
			}
		}
		else if (levelInfo[0] == "global") {
			sortedList = list;
		}
		for (i = 0; i < sortedList.length; i++) {
			$("#renderedSprites").append($("#sprites").children("#".concat(object)).clone().attr("class","renderedSprite").attr("id",object + i));
			if (levelInfo[0] == "territorial") {
			var xPosition = sortedList[i][0].xco*$("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0] + ($("#background").offset().left - $("#".concat(levelInfo[0]).concat("SVG")).offset().left)
			var yPosition = sortedList[i][0].yco*$("#territorialSVG").children("g").attr("transform").split("(")[1].split(")")[0] + ($("#background").offset().top - $("#".concat(levelInfo[0]).concat("SVG")).offset().top)
			$("#" + object + i).css("top",yPosition + "px").css("left",xPosition + "px")
			$("#renderedSprites").css("z-index","10")
			}
		}
	}

	parseDates();
	colorMap();
	setOriginalZoom();

	var width = $('.map').width();
	var height = $('.map').height();

	var zoomLevel = ["global","globe"];
	renderObject("encampment",zoomLevel);
	renderObject("fort",zoomLevel);
	$(".territoryImage").click( function(e) {

		if ($(document.elementFromPoint(e.pageX,e.pageY)).is("path") == true) {
			if (zoomLevel[0] == "global") { 
				var continent = $(".".concat($(document.elementFromPoint(e.pageX,e.pageY)).attr("class")))
				for (i = 0; i < continent.length; i++) {
					$("#continentalSVG").append($(continent[i]).parent().clone())
				}

				var box = $("#continentalSVG")[0].getBoundingClientRect()
				var newScaleFactor = ($("#background").height()*$("#continentalSVG").children("g").attr("transform").split("(")[1].replace(")",""))/box.height*0.95;
				$("#continentalSVG").children("g").attr("transform","scale(" + newScaleFactor + ")");
				var scaledBox = $("#continentalSVG").offset();
				scaledBox.top = ((scaledBox.top - $("#background").offset().top)/newScaleFactor) - (($("#background").height()/2) - ($("#continentalSVG")[0].getBoundingClientRect().height/2))
				scaledBox.left = ((scaledBox.left - $("#background").offset().left)/newScaleFactor) - (($("#background").width()/2) - ($("#continentalSVG")[0].getBoundingClientRect().width/2))
				$("#continentalSVG").children("g").attr("transform", $("#continentalSVG").children("g").attr("transform") + " translate(-" + scaledBox.left + ", -" + scaledBox.top + ")")
				$("#continentalSVG").css("z-index","2");
				$("#continentFilter").css("display","inline");
				zoomLevel = ["continental",$("#continentalSVG").children("g").attr("class")];
				//renderObject("encampment",zoomLevel);
				//renderObject("fort",zoomLevel);
			}
			else if (zoomLevel[0] == "continental") {
				var territory = "#" + document.elementFromPoint(e.pageX,e.pageY).id;
				$("#territorialSVG").append($(territory).parent().clone())
				var box = $("#territorialSVG")[0].getBoundingClientRect();
				var newScaleFactor
				if (box.width/3508 > box.height/1956) {
					newScaleFactor = ($("#background").width()*parseFloat($("#territorialSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.width*0.95;
				}
				else {
					newScaleFactor = ($("#background").height()*parseFloat($("#territorialSVG").children("g").attr("transform").split(")")[0].replace("scale(","")))/box.height*0.95;
				}
				$("#territorialSVG").children("g").attr("transform","scale(" + newScaleFactor + ")");
				var scaledBox = $("#territorialSVG").offset()
				//console.log(scaledBox)
				scaledBox.top = ((scaledBox.top - $("#background").offset().top)/newScaleFactor) - ($("#background").height() - ($("#territorialSVG")[0].getBoundingClientRect().height))/(newScaleFactor*2)
				scaledBox.left = ((scaledBox.left - $("#background").offset().left)/newScaleFactor) - ($("#background").width() - ($("#territorialSVG")[0].getBoundingClientRect().width))/(newScaleFactor*2)
				//console.log(($("#background").width() - ($("#territorialSVG")[0].getBoundingClientRect().width))/(newScaleFactor*2))
				$("#territorialSVG").children("g").attr("transform", $("#territorialSVG").children("g").attr("transform") + " translate(" + -1*scaledBox.left + ", " + -1*scaledBox.top + ")")
				$("#territorialSVG").css("z-index","4");
				$("#territoryFilter").css("display","inline");
				zoomLevel = ["territorial",territory, zoomLevel[1]];
				//renderObject("encampment",zoomLevel);
				//renderObject("fort",zoomLevel);
			}
		}

		else {
			if (zoomLevel[0] == "continental") {
				$("#continentalSVG").children().remove();
				$("#continentFilter").css("display","none");
				$("#continentalSVG").css("z-index","-1");
				zoomLevel = ["global","globe"];
				//renderObject("encampment",zoomLevel);
				//renderObject("fort",zoomLevel);
			}
			else if (zoomLevel[0] == "territorial") {
				$("#territorialSVG").children().remove();
				$("#territoryFilter").css("display","none");
				$("#territorialSVG").css("z-index","-1");
				$("#continentalSVG").css("z-index","2");
				zoomLevel = ["continental", zoomLevel[2]];
				//renderObject("encampment",zoomLevel);
				//renderObject("fort",zoomLevel);
			}
		}
	});

});
</script>

<div id="forms">
    <%= render partial: "form" %>
</div>

<div id="create_trade">
</div>

<div id="submitTradeDiv">
</div>

<button id="cancel_form" class="button">Cancel</button>

<canvas id="myCanvas" width="3508" height="1956">
    Oops, Your Browser Doesn't Support HTML5 Elements Try Again In Up to Date Version of IE Firefox Chrome Safari or Opera
</canvas>
<canvas id="color_territory_active_canvas" width="3508" height="1956">
    Oops, Your Browser Doesn't Support HTML5 Elements Try Again In Up to Date Version of IE Firefox Chrome Safari or Opera
</canvas>
<%= image_tag("territory_color_active_map.png", :class => "territory_color_active_image", :id => "color_territory_active_image") %>
<canvas id="color_map_overlay" width="3508" height="1956">
    Oops, Your Browser Doesn't Support HTML5 Elements Try Again In Up to Date Version of IE Firefox Chrome Safari or Opera
</canvas>

<div id="sprites">
    <%= render partial: "sprites" %>
</div>

<%= image_tag("active_map.png", :class => "active", :id => "active") %>


<div class="test1"  width="100%" height="100%">
	<div id="renderedSprites"></div>
	<div id="background"></div>
	<div id="continentFilter" class="filter"></div>
	<div id="territoryFilter" class="filter"></div>
	<svg
    preserveAspectRatio="xMinYMin meet"
	class="territoryImage" 
	id="continentalSVG"></svg>
	<svg
    preserveAspectRatio="xMinYMin meet"
	class="territoryImage" 
	id="territorialSVG"></svg>
    <%= render partial: "images" %>
</div>


<div class="test" style="color:red;"></div>
